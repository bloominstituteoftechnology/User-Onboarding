"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = require("preact");
var focus_1 = require("../focus");
var util_1 = require("../../../util");
var StepInputChecker = /** @class */ (function (_super) {
    __extends(StepInputChecker, _super);
    function StepInputChecker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.clearList = [];
        _this.lastValue = '';
        _this.state = {
            errors: [],
        };
        _this.validateValue = function () {
            var rules = _this.props.data.rules;
            var value = _this.getInputValue();
            // 值相同就不需要校验了
            if (value === _this.lastValue)
                return;
            var errors = [];
            // 逐一检查规则
            rules.forEach(function (rule) {
                // 正则检查
                if (rule.pattern) {
                    // m: 允许跨行匹配
                    var reg = new RegExp(rule.pattern, 'm');
                    if (!reg.exec(value)) {
                        errors.push(new Error(rule.message || "\u4E0D\u5339\u914D " + rule.pattern));
                    }
                }
            });
            _this.lastValue = value;
            _this.setState({ errors: errors });
        };
        return _this;
    }
    StepInputChecker.prototype.componentDidMount = function () {
        // 组件挂载的时候，开始轮询检查 input 值
        var stopInterval = util_1.makeIntervalPoll(this.validateValue, 800);
        this.clearList.push(stopInterval);
    };
    StepInputChecker.prototype.componentWillUnmount = function () {
        this.clearList.forEach(function (clear) { return clear(); });
    };
    StepInputChecker.prototype.getInputValue = function () {
        var _a = this.props.data, valueCollect = _a.valueCollect, _b = _a.valueCollectField, valueCollectField = _b === void 0 ? 'textContent' : _b;
        var dom = document.querySelector(valueCollect);
        if (!dom)
            return;
        return dom[valueCollectField];
    };
    StepInputChecker.prototype.render = function () {
        var content = this.props.data.content;
        var errors = this.state.errors;
        var newContent = content + (errors.length > 0 ? '<br/>' + errors.map(function (err) { return err.message; }).join('<br />') : '');
        return (preact_1.h(focus_1.StepFocus, __assign({}, this.props, { data: __assign({}, this.props.data, { type: 'focus', content: newContent }), 
            // 有错误就不显示“下一步”
            progressChild: errors.length ? null : this.props.progressChild })));
    };
    return StepInputChecker;
}(preact_1.Component));
exports.StepInputChecker = StepInputChecker;
//# sourceMappingURL=index.js.map